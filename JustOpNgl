-- FE ChatSpy using TextChatService (2025 rewrite)
-- Inspired by classic ChatSpy by Olaurau2
-- Fully supports team/private messages + /spy toggle

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer

local enabled = true
local spyPrefix = "[SPY]"
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Custom message formatting
local function MakeMessage(playerName, msg, channel)
	return string.format("%s [%s] (%s): %s", spyPrefix, playerName, channel, msg)
end

-- Print message to system chat
local function SendSystem(msg)
	StarterGui:SetCore("ChatMakeSystemMessage", {
		Text = msg,
		Color = Color3.new(1,1,1),
		Font = Enum.Font.SourceSansBold,
		FontSize = Enum.FontSize.Size24
	})
end

-- Toggle with "/spy"
LocalPlayer.Chatted:Connect(function(msg)
	if msg:lower() == "/spy" then
		enabled = not enabled
		SendSystem("{SPY " .. (enabled and "EN" or "DIS") .. "ABLED}")
	end
end)

-- TextChatService spy logic
TextChatService.OnIncomingMessage = function(message)
	if _G.chatSpyInstance ~= instance then return end
	if not enabled then return end

	local props = message.TextSource
	if not props then return end

	local sender = Players:GetPlayerByUserId(props.UserId)
	if not sender or sender == LocalPlayer then return end

	local msg = message.Text
	local channel = message.TextChannel and message.TextChannel.Name or "?"

	-- Format & show
	local formatted = MakeMessage(sender.Name, msg, channel)
	SendSystem(formatted)
end

-- Initial message
SendSystem("{SPY ENABLED} - Using TextChatService. Type /spy to toggle.")
